    依赖倒置原则

    定义：高层模块不应该依赖低层模块，二者都应该依赖其抽象。

          抽象不应该依赖细节，细节应该依赖其抽象。

          针对接口编程，而不要针对实现编程。

    优点：可以减少类之间的耦合性，提高系统稳定性，提高代码可读性和可维护性，可降低修改程序所造成的风险。










          让每个类尽量继承自抽象类或者实现接口。尽量不要从具体的类派生，尽量不要覆盖其基类的方法。
          以抽象为基础搭建起来的架构，比以细节搭建起来的架构稳定的多。





          ----------------------------------------------------------------------------------------------------------
          依赖倒转原则：抽象不应该依赖细节，细节应该依赖抽象，其实就是针对接口编程，不要对实现编程。

          在面向过程开发时，为了使代码复用，一般都会把这些常用的代码写成许许多多的函数，这样我们在做新项目的时候，直接去调用这些底层函数就好了。
          但是有时候我们在做新项目的时候，发现有些业务代码是可以复用的，但是代码中直接调用了底层函数，可能由于底层函数不一样无法复用。
          （建议依赖抽象而不要依赖具体实现。）
          ---------------------
          作者：sold_an
          来源：CSDN
          原文：https://blog.csdn.net/sold_an/article/details/80933986
          版权声明：本文为博主原创文章，转载请附上博文链接！

