    开闭原则

    定义：一个软件实体如类，模块，和函数应该对扩展开放，对修改关闭。

    中心思想：用抽象构建框架，用实现扩展细节。（面向抽象编程，而不是面向具体的实现编程。）

    优点：提高软件系统的可复用性及可维护性。


    eg:版本更新，尽量不修改源代码，还能增加新功能。



                                            开闭原则的精神



         抽象相对来说是稳定的，让类去依赖于固定的抽象所以说对修改来说是封闭的， 而通过面向对象的继承，以及多态的机制，就可以实现
      对抽象体的继承了，通过重写改变其固有方法，或者实现新的扩展方法。变化发生时，我们可以创建抽象来隔离以后有可能发生的变化。
      关键的核心在于实现抽象化，我们怎样从业务场景中抽象出业务模型，并且从抽象化得出具体化的一个实例。



      ----------------------------------------------------------------------------------------------------------------------
      开闭原则：就是说软件实体（类、模块、函数等）应该是可扩展、但不可修改。

      无论模块有多么的封闭，都会有一些无法对之封闭的变化。既然不能完全封闭，设计人员必须对他的设计模块应该对那种变化封闭做出选择。他必须猜测出最有可能发生变化的种类，然后构造抽象来隔离这些变化。
      在我们最初编写代码时，假设变化不会发生。当变化发生时，我们就创建抽象来隔离以后发生同类的变化。
      面对需求，对程序的改动是通过增加新代码进行的，而不是修改现有的代码。这就是开闭原则的精神所在
      ---------------------
      作者：sold_an
      来源：CSDN
      原文：https://blog.csdn.net/sold_an/article/details/80933986
      版权声明：本文为博主原创文章，转载请附上博文链接！
