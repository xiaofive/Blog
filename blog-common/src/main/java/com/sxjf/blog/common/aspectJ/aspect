	AOP 概述：
	AOP（Aspect Oriented Programing）：面向切面编程，将通用的逻辑从业务逻辑中分离出来。
	AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，
	与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的
	多处，而各处都基本相似。比如权限认证、日志、事务处理。Aop 的作用在于分离系统中的各
	种关注点，将核心关注点和横切关注点分离开来。正如Avanade公司的高级方案
	构架师Adam Magee所说，AOP的核心思想就是“将应用程序中的商业逻辑同对其提供支持的通用服务进行分离”。

	AOP 作用：
	1   监控函数的调用
	2   捕获异常发生
	实际应用在：事务、安全、日志等横切关注。

	优点：
    减少代码间的耦合性，使功能具有拔插性，保证自己代码的清洁型。
    能够让你只关注自己的代码，不需要关注切面是如何实现的。

	AOP 常识：
	切面（Aspect）：一个关注点的模块化，这个关注点可能会横切多个对象。事务管理是J2EE应用中一个关于横切关注点的很好的例子。
	在Spring AOP中，切面可以使用基于模式或者基于@Aspect注解的方式来实现。

    连接点（Joinpoint）：在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候。在Spring AOP中，一个连接点
    总是表示一个方法的执行。

    通知（Advice）：在切面的某个特定的连接点上执行的动作。其中包括了“around”、“before”和“after”等不同类型的通知
    （通知的类型将在后面部分进行讨论）。许多AOP框架（包括Spring）都是以拦截器做通知模型，并维护一个以连接点为中心的拦截器链。

    切入点（Pointcut）：匹配连接点的断言。通知和一个切入点表达式关联，并在满足这个切入点的连接点上运行
    （例如，当执行某个特定名称的方法时）。切入点表达式如何和连接点匹配是AOP的核心：Spring缺省使用AspectJ切入点语法。

    引入（Introduction）：用来给一个类型声明额外的方法或属性（也被称为连接类型声明（inter-type declaration））。
    Spring允许引入新的接口（以及一个对应的实现）到任何被代理的对象。例如，你可以使用引入来使一个bean实现IsModified接口，
    以便简化缓存机制。

    目标对象（Target Object）：被一个或者多个切面所通知的对象。也被称做被通知（advised）对象。既然Spring AOP是通过运行时
    代理实现的，这个对象永远是一个被代理（proxied）对象。

    AOP代理（AOP Proxy）：AOP框架创建的对象，用来实现切面契约（例如通知方法执行等等）。在Spring中，AOP代理可以是JDK动态代
    理或者CGLIB代理。

    织入（Weaving）：把切面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时
    （例如使用AspectJ编译器），类加载时和运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。


	通知类型
    一、返回通知
    无论连接点是正常返回还是抛出异常, 后置通知都会执行. 如果只想在连接点返回的时候记录日志, 应使用返回通知代替后置通知.
    在方法法正常结束受执行的代码；
    返回通知是可以访问到方法的返回值的!
    在返回通知中, 只要将 returning 属性添加到 @AfterReturning 注解中, 就可以访问连接点的返回值. 该属性的值即为用来传入返回值的参数名称.
    必须在通知方法的签名中添加一个同名参数. 在运行时, Spring AOP 会通过这个参数传递返回值.
    原始的切点表达式需要出现在 pointcut 属性中。
    二、异常通知
    只在连接点抛出异常时才执行异常通知
    将 throwing 属性添加到 @AfterThrowing 注解中, 也可以访问连接点抛出的异常. Throwable 是所有错误和异常类的超类. 所以在异常通知方法可以捕获到任何错误和异常.
    如果只对某种特殊的异常类型感兴趣, 可以将参数声明为其他异常的参数类型. 然后通知就只在抛出这个类型及其子类的异常时才被执行.
    三、环绕通知
    环绕通知是所有通知类型中功能最为强大的, 能够全面地控制连接点. 甚至可以控制是否执行连接点.
    对于环绕通知来说, 连接点的参数类型必须是 ProceedingJoinPoint . 它是 JoinPoint 的子接口, 允许控制何时执行, 是否执行连接点.
    在环绕通知中需要明确调用 ProceedingJoinPoint 的 proceed() 方法来执行被代理的方法. 如果忘记这样做就会导致通知被执行了, 但目标方法没有被执行.
    注意: 环绕通知的方法需要返回目标方法执行之后的结果, 即调用 joinPoint.proceed(); 的返回值, 否则会出现空指针异常。
    四、前置通知
    前置通知,在目标方法执行前执行
    五、后置通知
    后置通知,在目标方法执行后执行

